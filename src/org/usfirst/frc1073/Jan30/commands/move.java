// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc1073.Jan30.commands;
import edu.wpi.first.wpilibj.command.Command;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;

import org.usfirst.frc1073.Jan30.Robot;
import org.usfirst.frc1073.Jan30.RobotMap;

import com.ctre.CANTalon.FeedbackDevice;
import com.ctre.CANTalon.TalonControlMode;

/**
 *
 */
public class move extends Command {

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_DECLARATIONS
 
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_DECLARATIONS

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR
    double rate;
    double position;
    double count;
    double raw;
    double error;
    double distance;
    double speed;
    double temp;
    double enc;
    double encv;
    double dis = 1;
    double setp;
    double p=1.1,i=0,d=2.3;
    double setSpeed = 0;
	public move() {

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_SETTING

        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_SETTING
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES

        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
    }

    // Called just before this Command runs the first time
   //@SuppressWarnings("deprecation")
@SuppressWarnings("deprecation")
protected void initialize() {
	    	
		RobotMap.driveCANTalon1.enable();
	
    	p = SmartDashboard.getNumber("P");
    	i = SmartDashboard.getNumber("I");
    	d = SmartDashboard.getNumber("D");
    	
    	setSpeed = SmartDashboard.getNumber("SetSpeed");
    	
    	//dis = SmartDashboard.getNumber("Distance");
    	
    	// optical encoder
 //   	RobotMap.driveCANTalon1.setFeedbackDevice(FeedbackDevice.QuadEncoder);
        // mag encoder
    	RobotMap.driveCANTalon1.setFeedbackDevice(FeedbackDevice.CtreMagEncoder_Relative);

    	//RobotMap.driveCANTalon1.setAllowableClosedLoopErr(5); /* always servo */
        /* set closed loop gains in slot0 */
		//int absolutePosition = RobotMap.driveCANTalon1.getPulseWidthPosition() & 0xFFF; /* mask out the bottom12 bits, we don't care about the wrap arounds */
        /* use the low level API to set the quad encoder signal */
		//RobotMap.driveCANTalon1.configEncoderCodesPerRev(360);
		//RobotMap.driveCANTalon1.setEncPosition(absolutePosition);
		//SmartDashboard.putNumber("Abs", absolutePosition);
    	RobotMap.driveCANTalon1.setProfile(0);
    	//RobotMap.driveCANTalon1.setF(0.0);
    	RobotMap.driveCANTalon1.setP(p);
    	RobotMap.driveCANTalon1.setI(i); 
    	RobotMap.driveCANTalon1.setD(d);
    	RobotMap.driveCANTalon1.reverseOutput(true);
    	//RobotMap.driveCANTalon1.setForwardSoftLimit(100000);
    	//RobotMap.driveCANTalon1.enableForwardSoftLimit(true);
    	//RobotMap.driveCANTalon1.setReverseSoftLimit(-100000);
    	//RobotMap.driveCANTalon1.enableReverseSoftLimit(true);
    	//RobotMap.driveCANTalon1.setCloseLoopRampRate(2);

    	//RobotMap.driveCANTalon1.configMaxOutputVoltage(4);
    	// Position mode
//    	RobotMap.driveCANTalon1.changeControlMode(TalonControlMode.Position);
//    	RobotMap.driveCANTalon1.set(20); /* one rotation is 12.566 inches */
    	// Speed mode
    	RobotMap.driveCANTalon1.changeControlMode(TalonControlMode.Speed);
    	RobotMap.driveCANTalon1.set(setSpeed); /* rpm */
    }

    // Called repeatedly when this Command is scheduled to run
    protected void execute() {	
    	position = RobotMap.driveCANTalon1.getPosition();
    	speed = RobotMap.driveCANTalon1.getSpeed();
    	error = RobotMap.driveCANTalon1.getClosedLoopError();
    	SmartDashboard.putNumber("Position1", position);
    	//setp = RobotMap.driveCANTalon1.getSetpoint();
    	
    	
    	SmartDashboard.putNumber("Speed", speed);
    	SmartDashboard.putNumber("ERROR", error);
//    	SmartDashboard.putNumber("SETP", setp);
    	
    	System.out.println("Execute");
//    	SmartDashboard.getNumber("P", p);
//    	SmartDashboard.getNumber("I", i);
//    	SmartDashboard.getNumber("D", d);
//    	//RobotMap.driveCANTalon1.setP(p);
    	//RobotMap.driveCANTalon1.setI(i); 
    	//RobotMap.driveCANTalon1.setD(d);

    	
    }

    // Make this return true when this Command no longer needs to run execute()
    protected boolean isFinished() {
//    	System.out.println("isFinish");
//    	if(Math.abs(RobotMap.driveCANTalon1.getClosedLoopError()) < 25){
//    		System.out.println("Exiting");
//    		return false;
//    	}
//    	else
    		return false;
    }

    // Called once after isFinished returns true
    protected void end() {
    	RobotMap.driveCANTalon1.reset();
    	RobotMap.driveCANTalon1.disable();
    	RobotMap.driveCANTalon1.set(0);
    }

    // Called when another command which requires one or more of the same
    // subsystems is scheduled to run
    protected void interrupted() {
    	
    	RobotMap.driveCANTalon1.reset();
    	RobotMap.driveCANTalon1.disable();
    	RobotMap.driveCANTalon1.set(0);
    }
}
